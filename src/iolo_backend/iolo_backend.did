type AddContactArgs = record {
  id : principal;
  user_type : opt UserType;
  name : opt text;
  email : opt text;
};
type AddPolicyArgs = record {
  name : opt text;
  conditions_logical_operator : LogicalOperator;
  secrets : vec text;
  beneficiaries : vec principal;
  key_box : vec record { nat; SecretSymmetricCryptoMaterial };
  conditions : vec Condition;
};
type AddSecretArgs = record {
  url : opt text;
  username : opt vec nat8;
  password : opt vec nat8;
  name : opt text;
  symmetric_crypto_material : SecretSymmetricCryptoMaterial;
  notes : opt vec nat8;
  category : opt SecretCategory;
};
type AddUserArgs = record {
  id : principal;
  user_type : opt UserType;
  name : opt text;
  email : opt text;
};
type Condition = variant {
  TimeBasedCondition : TimeBasedCondition;
  XOutOfYCondition : XOutOfYCondition;
};
type Contact = record {
  id : principal;
  user_type : opt UserType;
  name : opt text;
  email : opt text;
};
type LogicalOperator = variant { Or; And };
type Policy = record {
  id : text;
  date_created : nat64;
  owner : principal;
  name : opt text;
  conditions_logical_operator : LogicalOperator;
  secrets : vec text;
  conditions_status : bool;
  beneficiaries : vec principal;
  key_box : vec record { nat; SecretSymmetricCryptoMaterial };
  conditions : vec Condition;
  date_modified : nat64;
};
type PolicyKeyDerviationArgs = record {
  encryption_public_key : vec nat8;
  policy_id : text;
};
type PolicyListEntry = record {
  id : text;
  owner : principal;
  condition_status : bool;
  name : opt text;
};
type PolicyResponse = record {
  id : text;
  date_created : nat64;
  owner : principal;
  name : opt text;
  conditions_logical_operator : LogicalOperator;
  secrets : vec SecretListEntry;
  conditions_status : bool;
  beneficiaries : vec principal;
  key_box : vec record { nat; SecretSymmetricCryptoMaterial };
  conditions : vec Condition;
  date_modified : nat64;
};
type Result = variant { Ok; Err : SmartVaultErr };
type Result_1 = variant { Ok : Policy; Err : SmartVaultErr };
type Result_10 = variant { Ok : Contact; Err : SmartVaultErr };
type Result_2 = variant { Ok : Secret; Err : SmartVaultErr };
type Result_3 = variant { Ok : User; Err : SmartVaultErr };
type Result_4 = variant { Ok : text; Err : SmartVaultErr };
type Result_5 = variant { Ok : vec Contact; Err : SmartVaultErr };
type Result_6 = variant { Ok : PolicyResponse; Err : SmartVaultErr };
type Result_7 = variant { Ok : vec PolicyListEntry; Err : SmartVaultErr };
type Result_8 = variant { Ok : vec SecretListEntry; Err : SmartVaultErr };
type Result_9 = variant {
  Ok : SecretSymmetricCryptoMaterial;
  Err : SmartVaultErr;
};
type Secret = record {
  id : nat;
  url : opt text;
  username : opt vec nat8;
  date_created : nat64;
  owner : principal;
  password : opt vec nat8;
  name : opt text;
  notes : opt vec nat8;
  category : opt SecretCategory;
  date_modified : nat64;
};
type SecretCategory = variant { Password; Note; Document };
type SecretListEntry = record {
  id : nat;
  name : opt text;
  category : opt SecretCategory;
};
type SecretSymmetricCryptoMaterial = record {
  encrypted_symmetric_key : vec nat8;
};
type SmartVaultErr = variant {
  ContactDoesNotExist : text;
  UserAlreadyExists : text;
  OnlyOwnerCanDeleteSecret : text;
  SecretHasNoId;
  UserDeletionFailed : text;
  ContactAlreadyExists : text;
  OnlyOwnerCanUpdatePolicy : text;
  SecretDoesNotExist : text;
  NoPolicyForBeneficiary : text;
  SecretDecryptionMaterialDoesNotExist : text;
  Unauthorized;
  UserUpdateFailed : text;
  NoPolicyForValidator : text;
  PolicyAlreadyExists : text;
  UserVaultCreationFailed : text;
  PolicyDoesNotExist : text;
  UserDoesNotExist : text;
  UserVaultDoesNotExist : text;
  SecretAlreadyExists : text;
  InvalidPolicyCondition;
  KeyGenerationNotAllowed;
};
type TimeBasedCondition = record {
  id : text;
  condition_status : bool;
  number_of_days_since_last_login : nat64;
};
type UpdateSecretArgs = record {
  id : nat;
  url : opt text;
  username : opt vec nat8;
  password : opt vec nat8;
  name : opt text;
  notes : opt vec nat8;
  category : opt SecretCategory;
};
type User = record {
  id : principal;
  user_type : opt UserType;
  date_created : nat64;
  contacts : vec Contact;
  name : opt text;
  secrets : vec nat;
  date_last_login : opt nat64;
  email : opt text;
  key_box : vec record { nat; SecretSymmetricCryptoMaterial };
  user_vault_id_DO_NOT_USE_ANYMORE : opt nat;
  date_modified : nat64;
  policies : vec text;
};
type UserType = variant { Company; Person };
type Validator = record { id : principal; status : bool };
type XOutOfYCondition = record {
  id : text;
  condition_status : bool;
  quorum : nat64;
  validators : vec Validator;
};
service : () -> {
  add_contact : (AddContactArgs) -> (Result);
  add_policy : (AddPolicyArgs) -> (Result_1);
  add_secret : (AddSecretArgs) -> (Result_2);
  confirm_x_out_of_y_condition : (principal, text, bool) -> (Result);
  create_user : (AddUserArgs) -> (Result_3);
  delete_user : () -> (Result);
  encrypted_ibe_decryption_key_for_caller : (vec nat8) -> (text);
  encrypted_symmetric_key_for_caller : (vec nat8) -> (text);
  encrypted_symmetric_key_for_policies : (PolicyKeyDerviationArgs) -> (
      Result_4,
    );
  encrypted_symmetric_key_for_uservault : (vec nat8) -> (text);
  get_contact_list : () -> (Result_5) query;
  get_current_user : () -> (Result_3) query;
  get_policy_as_beneficiary : (text) -> (Result_6) query;
  get_policy_as_owner : (text) -> (Result_6) query;
  get_policy_list_as_beneficiary : () -> (Result_7) query;
  get_policy_list_as_owner : () -> (Result_7) query;
  get_policy_list_as_validator : () -> (Result_7) query;
  get_secret : (nat) -> (Result_2) query;
  get_secret_as_beneficiary : (text, text) -> (Result_2) query;
  get_secret_list : () -> (Result_8) query;
  get_secret_symmetric_crypto_material : (nat) -> (Result_9) query;
  get_secret_symmetric_crypto_material_as_beneficiary : (nat, text) -> (
      Result_9,
    ) query;
  ibe_encryption_key : () -> (text);
  remove_contact : (Contact) -> (Result);
  remove_policy : (text) -> (Result);
  remove_secret : (text) -> (Result);
  symmetric_key_verification_key : () -> (text);
  update_contact : (Contact) -> (Result_10);
  update_policy : (Policy) -> (Result_1);
  update_secret : (UpdateSecretArgs) -> (Result_2);
  update_user : (User) -> (Result_3);
  update_user_login_date : () -> (Result_3);
}
