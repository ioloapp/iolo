type AddSecretArgs = record {
  id : text;
  url : opt text;
  username : opt vec nat8;
  password : opt vec nat8;
  name : opt text;
  symmetric_crypto_material : SecretSymmetricCryptoMaterial;
  notes : opt vec nat8;
  category : opt SecretCategory;
};
type AddTestamentArgs = record {
  id : text;
  heirs : vec principal;
  name : opt text;
  secrets : vec text;
  key_box : vec record { text; SecretSymmetricCryptoMaterial };
  conditions : vec Condition;
};
type AddUserArgs = record {
  id : principal;
  user_type : opt UserType;
  name : opt text;
  email : opt text;
};
type Condition = variant {
  TimeBasedCondition : TimeBasedCondition;
  XOutOfYCondition : XOutOfYCondition;
};
type Confirmer = record { id : principal; status : bool };
type Result = variant { Ok : User; Err : SmartVaultErr };
type Result_1 = variant { Ok : Secret; Err : SmartVaultErr };
type Result_2 = variant { Ok : Testament; Err : SmartVaultErr };
type Result_3 = variant { Ok; Err : SmartVaultErr };
type Result_4 = variant { Ok : text; Err : SmartVaultErr };
type Result_5 = variant { Ok : vec User; Err : SmartVaultErr };
type Result_6 = variant { Ok : vec SecretListEntry; Err : SmartVaultErr };
type Result_7 = variant {
  Ok : SecretSymmetricCryptoMaterial;
  Err : SmartVaultErr;
};
type Result_8 = variant { Ok : TestamentResponse; Err : SmartVaultErr };
type Result_9 = variant { Ok : vec TestamentListEntry; Err : SmartVaultErr };
type Secret = record {
  id : text;
  url : opt text;
  username : opt vec nat8;
  date_created : nat64;
  password : opt vec nat8;
  name : opt text;
  notes : opt vec nat8;
  category : opt SecretCategory;
  date_modified : nat64;
};
type SecretCategory = variant { Password; Note; Document };
type SecretListEntry = record {
  id : text;
  name : opt text;
  category : opt SecretCategory;
};
type SecretSymmetricCryptoMaterial = record {
  iv : vec nat8;
  password_decryption_nonce : opt vec nat8;
  notes_decryption_nonce : opt vec nat8;
  encrypted_symmetric_key : vec nat8;
  username_decryption_nonce : opt vec nat8;
};
type SmartVaultErr = variant {
  UserAlreadyExists : text;
  SecretHasNoId;
  UserDeletionFailed : text;
  SecretDoesNotExist : text;
  TestamentAlreadyExists : text;
  Unauthorized;
  TestamentDoesNotExist : text;
  InvalidTestamentCondition;
  UserVaultCreationFailed : text;
  UserDoesNotExist : text;
  UserVaultDoesNotExist : text;
  SecretAlreadyExists : text;
  NoTestamentsForHeir : text;
  KeyGenerationNotAllowed;
};
type Testament = record {
  id : text;
  heirs : vec principal;
  date_created : nat64;
  condition_status : bool;
  name : opt text;
  testator : principal;
  secrets : vec text;
  key_box : vec record { text; SecretSymmetricCryptoMaterial };
  conditions : vec Condition;
  date_modified : nat64;
};
type TestamentKeyDerviationArgs = record {
  encryption_public_key : vec nat8;
  testament_id : text;
};
type TestamentListEntry = record {
  id : text;
  condition_status : bool;
  name : opt text;
  testator : principal;
};
type TestamentResponse = record {
  id : text;
  heirs : vec principal;
  date_created : nat64;
  condition_status : bool;
  name : opt text;
  testator : principal;
  secrets : vec SecretListEntry;
  key_box : vec record { text; SecretSymmetricCryptoMaterial };
  conditions : vec Condition;
  date_modified : nat64;
};
type TimeBasedCondition = record {
  id : text;
  order: nat8;
  condition_status : bool;
  number_of_days_since_last_login : nat64;
};
type User = record {
  id : principal;
  user_type : opt UserType;
  date_created : nat64;
  name : opt text;
  date_last_login : opt nat64;
  email : opt text;
  user_vault_id : opt nat;
  date_modified : nat64;
};
type UserType = variant { Company; Person };
type XOutOfYCondition = record {
  id : text;
  order: nat8;
  condition_status : bool;
  quorum : nat64;
  confirmers : vec Confirmer;
};
service : () -> {
  add_heir : (AddUserArgs) -> (Result);
  add_secret : (AddSecretArgs) -> (Result_1);
  add_testament : (AddTestamentArgs) -> (Result_2);
  confirm_x_out_of_y_condition : (principal, text, bool) -> (Result_3);
  create_user : (AddUserArgs) -> (Result);
  delete_user : () -> (Result_3);
  encrypted_ibe_decryption_key_for_caller : (vec nat8) -> (text);
  encrypted_symmetric_key_for_caller : (vec nat8) -> (text);
  encrypted_symmetric_key_for_testament : (TestamentKeyDerviationArgs) -> (
      Result_4,
    );
  encrypted_symmetric_key_for_uservault : (vec nat8) -> (text);
  get_current_user : () -> (Result) query;
  get_heir_list : () -> (Result_5) query;
  get_secret : (text) -> (Result_1) query;
  get_secret_as_heir : (text, text) -> (Result_1) query;
  get_secret_list : () -> (Result_6) query;
  get_secret_symmetric_crypto_material : (text) -> (Result_7) query;
  get_secret_symmetric_crypto_material_as_heir : (text, text) -> (
      Result_7,
    ) query;
  get_testament_as_heir : (text) -> (Result_8) query;
  get_testament_as_testator : (text) -> (Result_8) query;
  get_testament_list_as_heir : () -> (Result_9) query;
  get_testament_list_as_testator : () -> (Result_9) query;
  ibe_encryption_key : () -> (text);
  is_user_vault_existing : () -> (bool) query;
  remove_heir : (principal) -> (Result_3);
  remove_secret : (text) -> (Result_3);
  remove_testament : (text) -> (Result_3);
  start_with_interval_secs : (nat64) -> ();
  symmetric_key_verification_key : () -> (text);
  update_heir : (User) -> (Result);
  update_secret : (Secret) -> (Result_1);
  update_testament : (Testament) -> (Result_2);
  update_user : (User) -> (Result);
  update_user_login_date : () -> (Result);
  what_time_is_it : () -> (nat64) query;
  who_am_i : () -> (text) query;
}
